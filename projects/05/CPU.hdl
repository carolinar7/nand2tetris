// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Determines whether to execute A or C instruction type
    Mux16(a=instruction, b[0..14]=aluOut15Bit, sel=instruction[15], out=intoARegister);
    // Always load to A register if A instruction
    Mux(a=true, b=instruction[5], sel=instruction[15], out=loadToARegister);
    // A register
    ARegister(in=intoARegister, load=loadToARegister, out=registerAContent, out[0..14]=addressM);
    // If C instruction, a register will determine whether to pull from A register or
    // M input
    Mux(a=false, b=instruction[12], sel=instruction[15], out=muxInput);
    Mux16(a=registerAContent, b=inM, sel=muxInput, out=intoALU);
    ALU(x=registerDContent, y=intoALU, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=aluOut, out[0..14]=aluOut15Bit, zr=aluZero, ng=aluNegative);
    // Don't load into register if A instruction
    Mux(a=false, b=instruction[4], sel=instruction[15], out=loadToDRegister);
    // D register
    Mux16(a[0..14]=aluOut15Bit, b=aluOut, sel=aluNegative, out=intoDRegister);
    DRegister(in=intoDRegister, load=loadToDRegister, out=registerDContent);
    // Don't writeM if A instruction
    Mux(a=false, b=instruction[3], sel=instruction[15], out=writeMSelect);
    // writeM
    Mux(a=false, b=true, sel=writeMSelect, out=writeM);
    // Alu return value is greater than 0
    Not(in=aluZero, out=notZero);
    Not(in=aluNegative, out=notNegative);
    And(a=notZero, b=notNegative, out=aluPositive);
    // Determine to jump or not
    And(a=aluNegative, b=instruction[2], out=isNegative);
    And(a=aluZero, b=instruction[1], out=isZero);
    And(a=aluPositive, b=instruction[0], out=isPositive);
    Or(a=isNegative, b=isZero, out=orOut);
    Or(a=orOut, b=isPositive, out=jump);
    Mux(a=false, b=jump, sel=instruction[15], out=load);
    // PC
    PC(in=registerAContent, load=load, inc=true, reset=reset, out[0..14]=pc);
}