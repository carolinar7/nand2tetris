// Class representing the Frog art
class Frog {
  field int currentAddress;
  field int x_position;
  field int y_position;
  field int direction;

  constructor Frog new(int x, int y) {
    let x_position = x;
    let y_position = y;
    let currentAddress = PositionHelpers.getAddressFromCoordinates(x, y);
    let direction = 1;
    do faceUp();
    return this;
  }

  method void moveForward(int new_direction) {
    if (new_direction = 1) { do moveUp(); }
    if (new_direction = 2) { do moveRight(); }
    if (new_direction = 3) { do moveLeft(); }
    return;
  }

  method void faceDirection(int new_direction) {
    if (new_direction = 1) { do faceUp(); }
    if (new_direction = 2) { do faceRight(); }
    if (new_direction = 3) { do faceLeft(); }
    return;
  }

  method void move(int new_direction) {
    do clearPaint();
    if (new_direction = direction) {
      do moveForward(new_direction);
    } else {
      do faceDirection(new_direction);
    }
    return;
  }

  method int getDirection() {
    return direction;
  }

  method void faceUp() {
    do drawUpFacingFrog();
    let direction = 1;
    return;
  }
  
  method void faceRight() {
    do drawRightFacingFrog();
    let direction = 2;
    return;
  }

  method void faceLeft() {
    do drawLeftFacingFrog();
    let direction = 3;
    return;
  }

  // TODO: We should avoid the pattern of adding
  // both coordinate moving logic and drawing logic
  // together. This makes it more difficult to
  // reconcile events that happened during the game.
  // For now, let's continue with this bad practice
  // and clean up later.
  method void moveUp() {
    let y_position = y_position - 10;
    let currentAddress = PositionHelpers.getAddressFromCoordinates(x_position, y_position);
    do drawUpFacingFrog();
    return;
  }

  method void moveRight() {
    let x_position = x_position + 10;
    let currentAddress = PositionHelpers.getAddressFromCoordinates(x_position, y_position);
    do drawRightFacingFrog();
    return;
  }

  method void moveLeft() {
    let x_position = x_position - 10;
    let currentAddress = PositionHelpers.getAddressFromCoordinates(x_position, y_position);
    do drawLeftFacingFrog();
    return;
  }

  // Up facing frog
  method void drawUpFacingFrog() {
    var int memAddress;
    let memAddress = 16384+currentAddress;
    do Memory.poke(memAddress+0, -22123);
    do Memory.poke(memAddress+32, 29646);
    do Memory.poke(memAddress+64, 13740);
    do Memory.poke(memAddress+96, 16380);
    do Memory.poke(memAddress+128, 2016);
    do Memory.poke(memAddress+160, 2016);
    do Memory.poke(memAddress+192, 2016);
    do Memory.poke(memAddress+224, 2016);
    do Memory.poke(memAddress+256, 2016);
    do Memory.poke(memAddress+288, 4080);
    do Memory.poke(memAddress+320, 8184);
    do Memory.poke(memAddress+352, 16380);
    do Memory.poke(memAddress+384, 28686);
    do Memory.poke(memAddress+416, 14364);
    do Memory.poke(memAddress+448, 7224);
    do Memory.poke(memAddress+480, 10836);
    return;
  }

  // Right facing frog
  method void drawRightFacingFrog() {
    var int memAddress;
    let memAddress = 16384+currentAddress;
    do Memory.poke(memAddress+0, ~32767);
    do Memory.poke(memAddress+32, 16392);
    do Memory.poke(memAddress+64, -4067);
    do Memory.poke(memAddress+96, 28734);
    do Memory.poke(memAddress+128, -28553);
    do Memory.poke(memAddress+160, 16370);
    do Memory.poke(memAddress+192, 24561);
    do Memory.poke(memAddress+224, -16);
    do Memory.poke(memAddress+256, -16);
    do Memory.poke(memAddress+288, 24561);
    do Memory.poke(memAddress+320, 16370);
    do Memory.poke(memAddress+352, -28553);
    do Memory.poke(memAddress+384, 28734);
    do Memory.poke(memAddress+416, -4067);
    do Memory.poke(memAddress+448, 16392);
    do Memory.poke(memAddress+480, ~32767);
    return;
  }

  // Left facing frog
  method void drawLeftFacingFrog() {
    var int memAddress;
    let memAddress = 16384+currentAddress;
    do Memory.poke(memAddress+0, 1);
    do Memory.poke(memAddress+32, 4098);
    do Memory.poke(memAddress+64, -18417);
    do Memory.poke(memAddress+96, 31758);
    do Memory.poke(memAddress+128, -4599);
    do Memory.poke(memAddress+160, 20476);
    do Memory.poke(memAddress+192, -28678);
    do Memory.poke(memAddress+224, 4095);
    do Memory.poke(memAddress+256, 4095);
    do Memory.poke(memAddress+288, -28678);
    do Memory.poke(memAddress+320, 20476);
    do Memory.poke(memAddress+352, -4599);
    do Memory.poke(memAddress+384, 31758);
    do Memory.poke(memAddress+416, -18417);
    do Memory.poke(memAddress+448, 4098);
    do Memory.poke(memAddress+480, 1);
    return;
  }

  method void clearPaint() {
    var int memAddress;
    let memAddress = 16384+currentAddress;
    do Memory.poke(memAddress+0, 0);
    do Memory.poke(memAddress+32, 0);
    do Memory.poke(memAddress+64, 0);
    do Memory.poke(memAddress+96, 0);
    do Memory.poke(memAddress+128, 0);
    do Memory.poke(memAddress+160, 0);
    do Memory.poke(memAddress+192, 0);
    do Memory.poke(memAddress+224, 0);
    do Memory.poke(memAddress+256, 0);
    do Memory.poke(memAddress+288, 0);
    do Memory.poke(memAddress+320, 0);
    do Memory.poke(memAddress+352, 0);
    do Memory.poke(memAddress+384, 0);
    do Memory.poke(memAddress+416, 0);
    do Memory.poke(memAddress+448, 0);
    do Memory.poke(memAddress+480, 0);
    return;
  }
}